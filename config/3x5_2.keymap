/*
 * Copyright (c) 2021 Sviatoslav Bulbakha
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define EXT 1
#define SYM 2
#define NUM 3
#define FUN 4

#define PREV LC(LS(TAB))
#define NEXT LC(TAB)

#define ZOOM_IN  LG(PLUS)
#define ZOOM_OUT LG(MINUS)
#define ZOOM_RES LG(N0)

#define BRI_UP LC(C_BRI_UP)
#define BRI_DN LC(C_BRI_DN)

&sk {
  release-after-ms = <1000>;
  quick-release;
  no-sticky-after-hold-ms = <500>; // requires PR #1788
};

&caps_word {
  mods = <(MOD_RSFT)>;
  /delete-property/ ignore-modifiers; // requires PR #1451
};

/ {
  conditional_layers {
    compatible = "zmk,conditional-layers";

    fun_tri_layer {
      if-layers = <1 2>;
      then-layer = <4>;
    };
  };



  keymap {
    compatible = "zmk,keymap";

    def_layer {
      label = "DEF";
      bindings = <
      &kp Q        &kp W        &kp F        &kp P        &kp B          &kp J        &kp L        &kp U        &kp Y        &kp SQT
      &kp A        &kp R        &kp S        &kp T        &kp G          &kp M        &kp N        &kp E        &kp I        &kp O
      &kp Z        &kp X        &kp C        &kp D        &kp V          &kp K        &kp H        &kp COMMA    &kp DOT      &kp FSLH
                                             &mo EXT      &kp RSFT       &kp SPACE    &mo SYM
      >;
    };

    ext_layer {
      label = "EXT";
      bindings = <
      &kp ESC      &kp PREV     &kp LG(F)     &kp NEXT     &key_repeat   &kp PG_UP    &kp HOME     &kp UP       &kp END      &kp CAPS
      &sk LSFT     &sk LGUI     &sk LALT      &sk LCTL     &kp LC(G)     &kp PG_DN    &kp LEFT     &kp DOWN     &kp RIGHT    &kp DEL
      &kp RG(Z)    &kp RG(X)    &kp RG(C)     &kp TAB      &kp RG(V)     &kp LA(BSPC) &kp BSPC     &none        &none        &none
                                              &trans       &trans        &kp RET      &trans
      >;
    };

    sym_layer {
      label = "SYM";
      bindings = <
      &kp EXCL     &kp HASH     &kp LBRC      &kp LPAR     &kp LBKT      &kp RBKT     &kp RPAR     &kp RBRC     &kp COLON    &kp GRAVE
      &kp PRCNT    &kp EQUAL    &kp MINUS     &kp UNDER    &kp LT        &kp GT       &sk LCTL     &sk LALT     &sk LGUI     &sk LSFT
      &kp PLUS     &kp AMPS     &kp PIPE      &kp AT       &kp TILDE     &kp CARET    &kp SEMI     &kp DLLR     &kp STAR     &kp BSLH
                                              &trans       &mo NUM       &trans       &trans
      >;
    };

    num_layer {
      label = "NUM";
      bindings = <
      &kp N7       &kp N5       &kp N3        &kp N1       &kp N9        &kp N8       &kp N0       &kp N2       &kp N4       &kp N6
      &sk LSFT     &sk LGUI     &sk LALT      &sk LCTL     &kp F11       &kp F10      &sk LCTL     &sk LALT     &sk LGUI     &sk LSFT
      &kp F7       &kp F5       &kp F3        &kp F1       &kp F9        &kp F8       &kp F12      &kp F2       &kp F4       &kp F6
                                              &trans       &trans        &trans       &trans
      >;
    };

    fun_layer {
      label = "FUN";
      bindings = <
      &none        &kp C_PREV   &kp C_PP      &kp C_NEXT   &kp BRI_UP    &kp ZOOM_IN  &bt BT_PRV   &bt BT_CLR   &bt BT_NXT   &none
      &none        &kp C_VOL_DN &kp C_MUTE    &kp C_VOL_UP &kp BRI_DN    &kp ZOOM_OUT &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &out OUT_TOG
      &none        &none        &none         &none        &none         &kp ZOOM_RES &none        &none        &none        &none
                                              &none        &trans        &trans       &trans
      >;
    };
  };
};
